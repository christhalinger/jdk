name: JDK

# Controls when the action will run. Triggers the workflow on push or pull request 
# events but only for the master branch
on:
  push:
    branches: [ test ]
#  pull_request:
#    branches: [ master ]

env:
  APT_GET_PACKAGES: ccache libasound2-dev libcups2-dev libx11-dev libxext-dev libxrandr-dev libxrender-dev libxt-dev libxtst-dev
  BREW_PACKAGES: ccache
  CONFIGURE_OPTIONS: --enable-ccache --with-ccache-dir=$PWD/ccache --with-jtreg=$PWD/jtreg --with-log=info --with-native-debug-symbols=zipped --with-jvm-features=-epsilongc,-shenandoahgc
  JTREG_TAG: jtreg5.0-b01

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  setup:
    runs-on: [ ubuntu-18.04 ]
    steps:
      - uses: actions/cache@v1
        id: cache-jtreg
        with:
          key: ${{env.JTREG_TAG}}
          path: jtreg/
      - uses: actions/setup-java@v1.3.0
        if: steps.cache-jtreg.outputs.cache-hit != 'true'
        with:
          java-version: 8
      - uses: actions/checkout@v2
        if: steps.cache-jtreg.outputs.cache-hit != 'true'
        with:
          repository: openjdk/jtreg
          ref: ${{env.JTREG_TAG}}
      - if: steps.cache-jtreg.outputs.cache-hit != 'true'
        run: sh make/build-all.sh $JAVA_HOME && mv -v build/images/jtreg .

  build:
    needs: [ setup ]
    strategy:
      matrix:
        os:
          - ubuntu-18.04
          - macos-10.15
        debuglevel:
          - release
          #- fastdebug
    runs-on: ${{matrix.os}}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: mstksg/get-package@v1
        with:
          apt-get: ${{env.APT_GET_PACKAGES}}
          brew: ${{env.BREW_PACKAGES}}
      - uses: actions/setup-java@v1.3.0
        with:
          java-version: 13
      - uses: actions/checkout@v2
      - uses: gerbal/always-cache@v1.0.3
        id: ccache
        with:
          key: ccache-${{matrix.os}}
          path: ccache/
      - uses: actions/cache@v1
        id: cache-jtreg
        with:
          key: ${{env.JTREG_TAG}}
          path: jtreg/

      - run: ccache --show-stats

      - run: sh configure ${{env.CONFIGURE_OPTIONS}} --with-debug-level=${{matrix.debuglevel}}
      - run: make jdk-image
      - run: make test-image

      - run: ccache --show-stats

      - run: mkdir artifacts
      - run: tar -czvf artifacts/images.tar build/*/images/jdk/ build/*/images/test/
      - uses: actions/upload-artifact@v1.0.0
        with:
          name: artifacts-${{matrix.os}}-${{matrix.debuglevel}}
          path: artifacts/
          
  test:
    needs: [ build ]
    strategy:
      fail-fast: false  # Keep other test jobs running if one fails
      #max-parallel: 20
      matrix:
        test:
#          # hotspot
#          - hotspot_compiler  # 79m(x)/46m(x)
#          - hotspot_gc  # 93m/50m
#          - hotspot_runtime hotspot_serviceability # 41m/30m + 5m = 46m
#          # jdk_core group
#          - jdk_lang jdk_util jdk_math jdk_io jdk_nio  # 19m + 19m + 2m + 3m + 21m = 63m
#          - jdk_rmi jdk_time jdk_text core_tools jdk_other  # 16m + 5m + 3m + 32m + 5m = 66m
#          - jdk_net  # 74m/53m(x)
#          - jdk_security  # 62m(x)/58m(x)
#          # jdk_svc group
#          - jdk_management jdk_instrument jdk_jmx jdk_jdi jdk_jfr svc_tools  # 3m + 3m + 11m + 15m + 15m + 3m = 50m

          - jdk_text
          - jdk_jfr

#          # hotspot
#          - hotspot_compiler
#          - hotspot_gc
#          - hotspot_runtime
#          - hotspot_serviceability
#          # jdk_core group
#          - jdk_lang
#          - jdk_util
#          - jdk_math
#          - jdk_io
#          - jdk_nio
#          - jdk_net
#          - jdk_rmi
#          - jdk_time
#          - jdk_security
#          - jdk_text
#          - core_tools
#          - jdk_other
#          # jdk_svc group
#          - jdk_management
#          - jdk_instrument
#          - jdk_jmx
#          - jdk_jdi
#          - jdk_jfr
#          - svc_tools
        os:
          - ubuntu-18.04
          - macos-10.15
        debuglevel:
          - release
          #- fastdebug
        compiler:
          - c2
          #- graal
        gc:
          #- g1
          - parallel
    runs-on: ${{matrix.os}}
    steps:
      - uses: mstksg/get-package@v1
        with:
          apt-get: ${{env.APT_GET_PACKAGES}}
      - uses: actions/setup-java@v1.3.0
        with:
          java-version: 13
      - uses: actions/checkout@v2
      - uses: actions/cache@v1
        id: cache-jtreg
        with:
          key: ${{env.JTREG_TAG}}
          path: jtreg/
      - uses: actions/download-artifact@v1.0.0
        with:
          name: artifacts-${{matrix.os}}-${{matrix.debuglevel}}
      - run: sh configure ${{env.CONFIGURE_OPTIONS}} --with-debug-level=${{matrix.debuglevel}}
      - run: tar -xpvf artifacts-${{matrix.os}}-${{matrix.debuglevel}}/images.tar
        
      - run: make run-test-only TEST="${{matrix.test}}" JTREG="VM_OPTIONS=-XX:+UseG1GC; EXTRA_PROBLEM_LISTS=ProblemList-g1.txt; VERBOSE=fail,error,time" LOG=debug
        if: matrix.compiler == 'c2' && matrix.gc == 'g1'
      - run: make run-test-only TEST="${{matrix.test}}" JTREG="VM_OPTIONS=-XX:+UseParallelGC; EXTRA_PROBLEM_LISTS=ProblemList-parallel.txt; VERBOSE=fail,error,time" LOG=debug
        if: matrix.compiler == 'c2' && matrix.gc == 'parallel'
      - run: make run-test-only TEST="${{matrix.test}}" JTREG="VM_OPTIONS=-XX:+UnlockExperimentalVMOptions -XX:+UseJVMCICompiler -XX:+UseG1GC; EXTRA_PROBLEM_LISTS=ProblemList-graal.txt ProblemList-g1.txt; VERBOSE=fail,error,time" LOG=debug
        if: matrix.compiler == 'graal' && matrix.gc == 'g1'
      - run: make run-test-only TEST="${{matrix.test}}" JTREG="VM_OPTIONS=-XX:+UnlockExperimentalVMOptions -XX:+UseJVMCICompiler -XX:+UseParallelGC; EXTRA_PROBLEM_LISTS=ProblemList-graal.txt ProblemList-parallel.txt; VERBOSE=fail,error,time" LOG=debug
        if: matrix.compiler == 'graal' && matrix.gc == 'parallel'

      - name: Failed tests
        if: failure()
        run: |
          mkdir -p test-results/failures/${{matrix.os}}-${{matrix.debuglevel}}-${{matrix.compiler}}-${{matrix.gc}}
          for i in build/*/test-results/jtreg_*; do cat $i/text/{newfailures.txt,other_errors.txt} | grep -v "^#" | tee test-results/failures/${{matrix.os}}-${{matrix.debuglevel}}-${{matrix.compiler}}-${{matrix.gc}}/`basename $i`.txt; done
      - uses: actions/upload-artifact@v1.0.0
        if: failure()
        with:
          name: test-results
          path: test-results/
      - name: Statistics
        if: always()
        run: cat build/*/test-results/*/text/{stats.txt,timeStats.txt}

  test-results:
    needs: [ test ]
    runs-on: [ ubuntu-18.04 ]
    if: always()
    steps:
      - uses: actions/download-artifact@v1.0.0
        with:
          name: test-results
      - name: Failed tests
        run: for i in test-results/failures/*; do echo "`basename $i`:"; cat $i/*.txt; echo ""; done
